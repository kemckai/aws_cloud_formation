AWSTemplateFormatVersion: '2023-09-09'
Description: Microservices architecture using ECS, ECR, and Application Load Balancer.

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  MyECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: my-microservice-repo

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-load-balancer
      Subnets: 
        - !Ref PublicSubnet
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS traffic
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: my-cluster

  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: my-task
      ContainerDefinitions:
        - Name: my-container
          Image: !Sub "${MyECRRepository}.dkr.ecr.${AWS::Region}.amazonaws.com/my-image:latest"
          Memory: 512
          PortMappings:
            - ContainerPort: 80
              HostPort: 80

  MyService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MyECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref MyTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet
          SecurityGroups:
            - !Ref LoadBalancerSecurityGroup
          AssignPublicIp: ENABLED

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      HealthCheckPath: /
      TargetType: ip
      Port: 80
      Protocol: HTTP

Outputs:
  LoadBalancerDNS:
    Description: "DNS name of the load balancer"
    Value: !GetAtt MyLoadBalancer.DNSName
